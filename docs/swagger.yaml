basePath: /
definitions:
  apperrors.Error:
    properties:
      code:
        type: string
      description:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  http.ChangePasswordRequest:
    properties:
      currentPassword:
        type: string
      newPassword:
        minLength: 6
        type: string
    required:
    - currentPassword
    - newPassword
    type: object
  http.CreateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  http.CreateProductRequest:
    properties:
      categoryIds:
        items:
          type: integer
        minItems: 1
        type: array
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stockQuantity:
        minimum: 0
        type: integer
    required:
    - categoryIds
    - description
    - name
    - price
    - stockQuantity
    type: object
  http.CreateReviewRequest:
    properties:
      comment:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - comment
    - rating
    type: object
  http.ProductPage:
    properties:
      data:
        items:
          $ref: '#/definitions/product.Product'
        type: array
      metadata:
        $ref: '#/definitions/paging.MetaData'
    type: object
  http.SignInRequest:
    properties:
      password:
        type: string
      userName:
        type: string
    required:
    - password
    - userName
    type: object
  http.SignUpRequest:
    properties:
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
      role:
        enum:
        - user
        - admin
        type: string
      userName:
        type: string
    required:
    - email
    - fullName
    - password
    - role
    - userName
    type: object
  http.UpdateCategoryRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  http.UpdateProductRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stockQuantity:
        minimum: 0
        type: integer
    required:
    - description
    - name
    - price
    - stockQuantity
    type: object
  http.UpdateUserRoleRequest:
    properties:
      role:
        enum:
        - user
        - admin
        type: string
    required:
    - role
    type: object
  paging.MetaData:
    properties:
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      pageSize:
        type: integer
    type: object
  product.Category:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      total:
        type: integer
      updatedAt:
        type: string
    type: object
  product.Product:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      status:
        $ref: '#/definitions/product.ProductStatus'
      stockQuantity:
        type: integer
      updatedAt:
        type: string
    type: object
  product.ProductStatus:
    enum:
    - IN_STOCK
    - OUT_OF_STOCK
    type: string
    x-enum-varnames:
    - ProductStatusInStock
    - ProductStatusOutOfStock
  product.Review:
    properties:
      comment:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      productId:
        type: integer
      rating:
        type: integer
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  user.Token:
    properties:
      accessToken:
        type: string
    type: object
  user.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: integer
      role:
        $ref: '#/definitions/user.UserRole'
      updatedAt:
        type: string
      username:
        type: string
    type: object
  user.UserRole:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRoleUser
    - UserRoleAdmin
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a store management server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Store Management API
  version: "1.0"
paths:
  /admin/reviews:
    get:
      consumes:
      - application/json
      description: Get all product reviews with optional product name filter (admin
        only)
      parameters:
      - description: Filter by product name
        in: query
        name: productName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Review'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: List reviews
      tags:
      - reviews
  /admin/reviews/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a review by ID (admin only)
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Delete review
      tags:
      - reviews
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users (requires admin role)
      parameters:
      - description: Search by username or email
        in: query
        name: search
        type: string
      - collectionFormat: csv
        description: Filter by roles (user, admin)
        in: query
        items:
          type: string
        name: roles
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users
  /admin/users/{id}/role:
    put:
      consumes:
      - application/json
      description: Update a user's role (requires admin role)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: New role details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Update user role
      tags:
      - users
  /categories:
    get:
      consumes:
      - application/json
      description: Get all product categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Category'
            type: array
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new product category (admin only)
      parameters:
      - description: Category details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/product.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Create category
      tags:
      - categories
  /categories/{categoryId}/products:
    get:
      consumes:
      - application/json
      description: Get all products in a specific category
      parameters:
      - description: Category ID
        in: path
        name: categoryId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: List products by category
      tags:
      - products
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product category (admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get a product category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update an existing product category (admin only)
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Update category
      tags:
      - categories
  /change-password:
    post:
      consumes:
      - application/json
      description: Change the authenticated user's password
      parameters:
      - description: Password change details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
  /products:
    get:
      consumes:
      - application/json
      description: Get all products with optional filtering and pagination
      parameters:
      - description: Filter by product name
        in: query
        name: name
        type: string
      - collectionFormat: csv
        description: Filter by product statuses (IN_STOCK, OUT_OF_STOCK)
        in: query
        items:
          type: string
        name: statuses
        type: array
      - description: 'Page size (default: 20, max: 200)'
        in: query
        name: size
        type: integer
      - description: Cursor for keyset pagination
        in: query
        name: cursor
        type: integer
      - collectionFormat: csv
        description: Sort orders (e.g., name ASC, price DESC)
        in: query
        items:
          type: string
        name: sort
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.ProductPage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product (admin only)
      parameters:
      - description: Product details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Create product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Get product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product (admin only)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - products
  /products/{productId}/reviews:
    post:
      consumes:
      - application/json
      description: Create a new product review (authenticated users only)
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Review details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/product.Review'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Create review
      tags:
      - reviews
  /profile:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /signin:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access token
      parameters:
      - description: Sign in credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Sign in user
      tags:
      - users
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
      summary: Register new user
      tags:
      - users
  /wishlist:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's wishlist
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Get user's wishlist
      tags:
      - wishlist
  /wishlist/{productId}:
    delete:
      consumes:
      - application/json
      description: Remove a product from the authenticated user's wishlist
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Remove product from wishlist
      tags:
      - wishlist
    post:
      consumes:
      - application/json
      description: Add a product to the authenticated user's wishlist
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.Error'
      security:
      - BearerAuth: []
      summary: Add product to wishlist
      tags:
      - wishlist
schemes:
- http
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
